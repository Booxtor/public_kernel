#!/bin/sh

PASSWORD="Mx*98Ndqx01@Jc"
# do not add line above  !!!
init=/sbin/init

check_update()
{
  update_pkg=""

  for i in $(ls /mnt/mmc|grep "update-[0-9]\{8\}.zip")
  do
	  continue
  done

  echo $i

  if [ ! -z $i ]; then
    # Extracting files.
    echo "Extracting files..."
    
    update_pkg=/mnt/mmc/$i

    /bin/unzip -o -P $PASSWORD $update_pkg boot/boot-splash -d /tmp/
    if [ $? -eq "0" ]; then
       echo "Password is correct." 
    else
       echo "Password is error !!!"
       umount /mnt/mmc
       reboot
       sleep 60
    fi

    mxcfb_disp_msg /bin/extracting.dat

    mkdir -p /mnt/rootfs

    /bin/unzip -o -P $PASSWORD $update_pkg usr/bin/mke2fs -d /tmp/
    RET=$?
    if [ $RET == 0 ]; then
        chmod 777 /tmp/usr/bin/mke2fs
        /tmp/usr/bin/mke2fs -T ext4 -m0 /dev/mmcblk0p1
        mount -t ext4 /dev/mmcblk0p1 /mnt/rootfs
        cd /mnt/rootfs
    else
        mount -t ext4 /dev/mmcblk0p1 /mnt/rootfs
        cd /mnt/rootfs
        rm -rf *
    fi
    # Do update.
    mxcfb_disp_msg /bin/updating.dat

    sync 
    # Decrypt & extract the update package
    /bin/unzip -P $PASSWORD $update_pkg -d /mnt/rootfs
    
    if [ -f "boot/post_update.sh" ]; then
        cp boot/post_update.sh /tmp
        rm boot/post_update.sh
    fi

    # Update bootloader
    #if [ -f "boot/u-boot.bin" ]; then
    #    echo 1 > /sys/devices/platform/mxsdhci.2/mmc_host/mmc0/mmc0:0001/boot_config
    #    dd if=boot/u-boot.bin of=/dev/mmcblk0 skip=2 seek=2
    #    echo 8 > /sys/devices/platform/mxsdhci.2/mmc_host/mmc0/mmc0:0001/boot_config
    #    echo 2 > /sys/devices/platform/mxsdhci.2/mmc_host/mmc0/mmc0:0001/boot_bus_config
    #fi

    # Update boot splash
    if [ -f "boot/boot-splash" ]; then
       dd if=boot/boot-splash of=/dev/mmcblk0 bs=512 seek=2048
    fi

    # Update uImage
    if [ -f "boot/uImage" ]; then
        dd if=boot/uImage of=/dev/mmcblk0 bs=512 seek=8192
    fi

    # Update initramfs
    if [ -f "boot/uImage-initramfs" ]; then
        dd if=boot/uImage-initramfs of=/dev/mmcblk0 bs=512 seek=12288
    fi

    # Copy custom fonts
    if [ -d "/mnt/mmc/fonts" ]; then
        cp  /mnt/mmc/fonts/*.ttf /mnt/rootfs/opt/onyx/arm/lib/fonts/
    fi

    #Delete the boot directory.
    rm -rf boot

    mknod dev/console  c 5 1
    mknod dev/null     c 1 3
    sync
 
	cd /
    umount /mnt/rootfs

    echo "Update complete."
    # Update complete, change display
    mxcfb_disp_msg /bin/booting.dat

    if [ -f "/tmp/post_update.sh" ]; then
        sh /tmp/post_update.sh
        rm /tmp/post_update.sh
    fi

    # Restart device
    reboot
  else
    echo "No update found."
    mxcfb_disp_msg /bin/no_updates.dat
  fi
}

normal_boot()
{
  # Mount real rootfs
  mount -t ext4 /dev/mmcblk0p1 /newroot

  # Check if there is a init script
  if [ -x "/newroot/${init}" ] ; then
    #Unmount all other mounts so that the ram used by
    #the initramfs can be cleared after switch_root
    umount /sys /proc

    #Switch to the new root and execute init
    exec switch_root /newroot "${init}"
  fi
}

# Mount things needed by this script
busybox mount -t proc proc /proc
busybox mount -t sysfs sysfs /sys

# Create all the symlinks to /bin/busybox
busybox --install -s

# Main entry for initramfs
echo "Entering initramfs... V1.1"

# Load code page modules.
insmod /lib/modules/nls_iso8859-1.ko
insmod /lib/modules/nls_cp437.ko

retry_count=0
while [ $retry_count -lt 5 ]
do
  if [ -b "/dev/mmcblk1p1" ]; then
    mount -t vfat /dev/mmcblk1p1 /mnt/mmc
    if [ $? = 0 ]; then
      break
    fi
  fi
  sleep 1
  retry_count=`expr $retry_count + 1`
done

if [ $retry_count -lt 5 ]; then
  check_update
  umount /mnt/mmc
fi

mount -t vfat /dev/mmcblk1 /mnt/mmc
if [ $? = 0 ]; then
  check_update
  umount /mnt/mmc
else
  # No sd card in slot
  echo "Mount SD card failed"
  mxcfb_disp_msg /bin/no_updates.dat
fi

# Start normal boot process.
normal_boot

# Impossible to reach.
exec sh
